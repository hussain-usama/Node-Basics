**********IMPORT / EXPORT IN NODEJS************
    when we create a file with .js extension we cannot perform export and import directly lik in react environment
    if i created a variable in app.js file export it i can simply use is in other file like in index.js i simply
    do import x from './app' and use it .

    In NODE environment we need to do following 
    index.js                                app.js
    const app=require('./app')                 const x = 10 
    console.log(app.x)                           module.exports={
                                                    x,
                                                }
    all the exports will be done thorugh in module.exports object and no import statement will use instead require statement will be used
    it is es5 syntax and still widely used. In es6 it has been overcome by simply using .mjs extension for files like index.mjs / app.mjs
    with .mjs extension we can simply do import export like in normal JS and React


****************NODULES**************
default modules includes like console.log , fs, buffer etc cn explore in node.js documentations
here console.log like module are global module that does not need any import statement while fs buffer type modules
are non-global these are dafault modules of node we don't need to install any thing but these can't be used without import / require staements.

**************CREATING SERVER**********
import http
and then use method createserver

BUFFER ===> A Temporary memory location

**********QUERY PARAMS*********
if route is http://localhost:3000/products?name=mobile
we can get it in BE using req.query.name

**********CREATE HTML ELEMENTS**********
like we send JSON response of API same as HTML elements can also send 
resp.send({
`<input type='text' value=${req.query.name}/>
<a href='/details'>Go to details page</a>
<button>Click</button>
`
})

**********OPEN HTML PAGE*************
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const folderPath = path.join(__dirname, 'staticPages');

above code is used get folder path we created
now if we want to open any html page using node we need to do
app.use(express.static(folderPath)) 
it will open page in path like  http://localhost:5000/about.html

Now if we want to open html in our specific route or route we define 
app.get(path,call back function)
it will open html page we created in path define and send file method is used
app.get('/', (req,res) => {
    res.sendFile(`${folderPath}/about.html`)
})
ALL ROUTES MUST BE DEFINE ABOVE THIS
make 404 page 
app.get('*', (req,res) => {
    res.sendFile(`${folderPath}/404Page.html`)
})

****************EJS TEMPLATE************
this npm package is used to to pass and show dynamic data in our html page
steps:
=>install package 
=> make folder name views . Name shoudl be 'views' b/c it is by default configuration of node
=> inside folder make file filename.ejs 
=> in our main index file first need to define ejs using syntax
        const app=express()
        app.set('view engine','ejs')
        app.get(ANYROUTE_NAME, (req,res) => {
        const user={
            name:'Usama Hussain',
            email:'usamaahussain23@gmail.com'
        }
        res.render(EJS_FILE_NAME,{user})
})
=> do normal HTML code in ejs file and where we want to show our dynamic data it can shown as following syntax
        <%= passed data %> like <%= user.name %>

=> CALL ONE COMPONENT / OR SAME EJS FILE IN OTHERS FILE 
 like wo create component in react header/ footer and use it in other component we can do it ejs 
 =>make ejs file like header.ejs
 SYNTAX TO USE HEADER FILE IN OTHERS FILE => <%- 'include(FOLDER_NAME/FILE_NAME)' %>


*************MONGODB COMPASS******************

MONGODB COMPASS is a GUI tools of mongodb
Download and install mongodbcompass and add its path in system enviroment variable

commands for MONGODB COMPASS
=>show dbs (show all created dbs list )
=>use DB_NAME (select and use specific database if DB_NAME is not in db list it will create new database named DB_NAME)
=>db (show you current used database)
=>db.dropDatabase() (delete any db)
=>use DB_NAME then db.createCollection('COLLECTION_NAME') (it will create collection in selected db)